<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">atpaino site</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2013-11-02T00:12:33+01:00</updated>
<id>/</id>
<author>
  <name>Alex Paino</name>
  <uri>/</uri>
  <email>atpaino@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Improving Genetic Programming Performance in Matlab]]></title>
  <link>/improving-GP-performance-in-matlab</link>
  <id>/improving-GP-performance-in-matlab</id>
  <published>2013-11-01T17:32:59+01:00</published>
  <updated>2013-11-01T17:32:59+01:00</updated>
  <author>
    <name>Alex Paino</name>
    <uri></uri>
    <email>atpaino@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;I have been implementing a 
&lt;a href=&quot;http://en.wikipedia.org/wiki/Genetic_programming&quot;&gt;Genetic Programming&lt;/a&gt; (GP) 
algorithm for my research and have run into, and overcome, some severe 
performance issues. I am writing up the steps I took to achieve a usable level 
of performance so that it might be useful to others trying to write a GP 
algorithm (or just evaluate arithmetic expression trees) in Matlab.&lt;/p&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;/h1&gt;
&lt;p&gt;In my research I am using GP to evolve image feature extraction algorithms with 
a structure similar to the 
&lt;a href=&quot;http://en.wikipedia.org/wiki/Histogram_of_oriented_gradients&quot;&gt;Histogram of Oriented Gradients&lt;/a&gt; (HOG) 
and &lt;a href=&quot;http://en.wikipedia.org/wiki/Local_binary_patterns&quot;&gt;Local Binary Pattern&lt;/a&gt; 
(LBP) algorithms. Each candidate solution in the algorithm is represented as 
an arithmetic expression tree that acts on a sub=cell of the image of 
predetermined size. To compute a feature vector for a given image, the 
expression represented by the tree must be evaluated for a sub=cell centered 
on every pixel in the image. Thus, an expression must be evaluated 128^2 times 
for an image with the dimensions 128x128. Additionally, GP usually calls for a 
population of at least 100 such candidate solutions, each of which must be 
evaluated on every image in a training set for at least 10 generations. As if 
this weren&amp;#8217;t enough, my implementation required me to evaluate the fitness 
function over a training set of 500 images.&lt;/p&gt;

&lt;p&gt;For those keeping score, that means the algorithm will perform at least 
128*128*100*10*500 = &lt;strong&gt;8.192 billion parse tree evaluations&lt;/strong&gt;! And that&amp;#8217;s 
before considering the possibility of having multiple features per candidate 
solution, which I have limited to 10. So in order for the algorithm to ever 
finish running, the evaluation of the expression better be very efficient.&lt;/p&gt;

&lt;h1 id=&quot;initial-approach-recursive-evaluation&quot;&gt;Initial Approach: Recursive Evaluation&lt;/h1&gt;
&lt;p&gt;Evaluating a parse tree naturally lends itself to a recursive solution, so 
that was the first approach I took. However, when I first had this approach 
working, I realized it was way too slow to work. As in several orders of 
magnitude too slow. To get a handle on why, I ran Matlab&amp;#8217;s Profile tool on a 
candidate solution running on one image, which gave me the following output:
&lt;img src=&quot;/images/&quot; alt=&quot;Initial Performance Profile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;See that full blue bar next to &amp;#8220;TODO: function call&amp;#8221;? That means that almost 
all of the execution time was being spent in context switches due to the 
ridiculous number of recursive function calls.&lt;/p&gt;

&lt;h1 id=&quot;second-attempt-building-string-expressions-and-using-eval&quot;&gt;Second Attempt: Building String Expressions and Using eval()&lt;/h1&gt;
&lt;p&gt;After viewing the profile results from my initial approach, I begun thinking 
of ways to simplify the parse tree once before evaluating it. The solution I 
came up with was to build the arithmetic expression represented by a parse 
tree as a string, and then evaluate this expression using Matlab&amp;#8217;s &lt;code&gt;eval()&lt;/code&gt; 
function.
&lt;img src=&quot;/images/&quot; alt=&quot;Second Attempt Performance Profile&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;getting-closer-building-anonymous-functions-using-eval&quot;&gt;Getting Closer: Building Anonymous Functions using eval()&lt;/h1&gt;
&lt;p&gt;While the previous iteration drastically improved performance, it would still 
take weeks to run even a small version of the algorithm.
&lt;img src=&quot;/images/&quot; alt=&quot;Getting Closer Performance Profile&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;solution-build-a-single-multivariate-anonymous-function&quot;&gt;Solution: Build a Single Multivariate Anonymous Function&lt;/h1&gt;
&lt;p&gt;After reviewing the profile results from the previous run, I realized that 
most of the run time was being taken up my overtime involved with executing 
anonymous functions. Thus, in order to reduce the number of anonymous function 
calls I vector=ized the functions by having one anonymous function calculate 
all of the features for a parse tree. This greatly reduced the overhead of the 
anonymous functions by a factor of 10 (the limit on the number of features 
allowed per tree). 
&lt;img src=&quot;/images/&quot; alt=&quot;Final Performance Profile&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;If anyone has any other suggestions for improving performance in this 
application, please let me know. If you are interested in reading up on my 
research more, please see &lt;a href=&quot;/images/huhro.png&quot;&gt;this&lt;/a&gt;. Thanks for reading.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/improving-GP-performance-in-matlab&quot;&gt;Improving Genetic Programming Performance in Matlab&lt;/a&gt; was originally published by Alex Paino at &lt;a href=&quot;&quot;&gt;atpaino site&lt;/a&gt; on November 01, 2013.&lt;/p&gt;</content>
</entry>

</feed>
